
Falgon_CMU_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004110  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f0  080042f0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080042f0  080042f0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042f0  080042f0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f0  080042f0  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080042f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000178  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c331  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d85  00000000  00000000  0001236d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  000140f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074a  00000000  00000000  00014a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203bc  00000000  00000000  000151ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d931  00000000  00000000  00035576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0d31  00000000  00000000  00042ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103bd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025b4  00000000  00000000  00103c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001061d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800428c 	.word	0x0800428c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800428c 	.word	0x0800428c

080001d4 <BQ769x2_ReadVoltage>:
 * @param  command value of command to check for specific sub-section of the system
 * @retval voltage
 * @note   in mV for cells and in 0.01V unit for stack,pack and LD
 */
uint16_t BQ769x2_ReadVoltage(uint8_t command)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	//RX_data is global var
	handle_direct_commands(command, 0x00, R);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2200      	movs	r2, #0
 80001e2:	2100      	movs	r1, #0
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f953 	bl	8000490 <handle_direct_commands>
	if(command >= Cell1Voltage && command <= Cell16Voltage) {//Cells 1 through 16 (0x14 to 0x32)
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b13      	cmp	r3, #19
 80001ee:	d90b      	bls.n	8000208 <BQ769x2_ReadVoltage+0x34>
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	2b32      	cmp	r3, #50	@ 0x32
 80001f4:	d808      	bhi.n	8000208 <BQ769x2_ReadVoltage+0x34>
		return (RX_data[1]*256 + RX_data[0]); //voltage is reported in mV
 80001f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000228 <BQ769x2_ReadVoltage+0x54>)
 80001f8:	785b      	ldrb	r3, [r3, #1]
 80001fa:	021b      	lsls	r3, r3, #8
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000228 <BQ769x2_ReadVoltage+0x54>)
 8000200:	7812      	ldrb	r2, [r2, #0]
 8000202:	4413      	add	r3, r2
 8000204:	b29b      	uxth	r3, r3
 8000206:	e00b      	b.n	8000220 <BQ769x2_ReadVoltage+0x4c>
	}
	else {//stack, Pack, LD
		return 10 * (RX_data[1]*256 + RX_data[0]); //voltage is reported in 0.01V units
 8000208:	4b07      	ldr	r3, [pc, #28]	@ (8000228 <BQ769x2_ReadVoltage+0x54>)
 800020a:	785b      	ldrb	r3, [r3, #1]
 800020c:	021b      	lsls	r3, r3, #8
 800020e:	4a06      	ldr	r2, [pc, #24]	@ (8000228 <BQ769x2_ReadVoltage+0x54>)
 8000210:	7812      	ldrb	r2, [r2, #0]
 8000212:	4413      	add	r3, r2
 8000214:	b29b      	uxth	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	0092      	lsls	r2, r2, #2
 800021a:	4413      	add	r3, r2
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	b29b      	uxth	r3, r3
	}

}
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000028 	.word	0x20000028

0800022c <BQ769x2_ReadAllVoltages>:
 * @param  None
 * @retval None
 * @note   reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
 */
void BQ769x2_ReadAllVoltages(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  int cellvoltageholder = Cell1Voltage; //Cell1Voltage is 0x14
 8000232:	2314      	movs	r3, #20
 8000234:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 8000236:	2300      	movs	r3, #0
 8000238:	603b      	str	r3, [r7, #0]
 800023a:	e010      	b.n	800025e <BQ769x2_ReadAllVoltages+0x32>
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
 8000242:	f7ff ffc7 	bl	80001d4 <BQ769x2_ReadVoltage>
 8000246:	4603      	mov	r3, r0
 8000248:	4619      	mov	r1, r3
 800024a:	4a13      	ldr	r2, [pc, #76]	@ (8000298 <BQ769x2_ReadAllVoltages+0x6c>)
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3302      	adds	r3, #2
 8000256:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	3301      	adds	r3, #1
 800025c:	603b      	str	r3, [r7, #0]
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	2b0f      	cmp	r3, #15
 8000262:	ddeb      	ble.n	800023c <BQ769x2_ReadAllVoltages+0x10>
  }
  Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 8000264:	2034      	movs	r0, #52	@ 0x34
 8000266:	f7ff ffb5 	bl	80001d4 <BQ769x2_ReadVoltage>
 800026a:	4603      	mov	r3, r0
 800026c:	461a      	mov	r2, r3
 800026e:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <BQ769x2_ReadAllVoltages+0x70>)
 8000270:	801a      	strh	r2, [r3, #0]
  Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage);
 8000272:	2036      	movs	r0, #54	@ 0x36
 8000274:	f7ff ffae 	bl	80001d4 <BQ769x2_ReadVoltage>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <BQ769x2_ReadAllVoltages+0x74>)
 800027e:	801a      	strh	r2, [r3, #0]
  LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 8000280:	2038      	movs	r0, #56	@ 0x38
 8000282:	f7ff ffa7 	bl	80001d4 <BQ769x2_ReadVoltage>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <BQ769x2_ReadAllVoltages+0x78>)
 800028c:	801a      	strh	r2, [r3, #0]
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000004c 	.word	0x2000004c
 800029c:	2000006c 	.word	0x2000006c
 80002a0:	2000006e 	.word	0x2000006e
 80002a4:	20000070 	.word	0x20000070

080002a8 <BQ769x2_ReadCellBalance>:

void BQ769x2_ReadCellBalance(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

	handle_subcommands(CB_SET_LVL, 0x00, R);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2100      	movs	r1, #0
 80002b0:	2084      	movs	r0, #132	@ 0x84
 80002b2:	f000 f91f 	bl	80004f4 <handle_subcommands>
	HAL_Delay(5);
 80002b6:	2005      	movs	r0, #5
 80002b8:	f000 fe90 	bl	8000fdc <HAL_Delay>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <BQ769x2_WriteCellBalance>:

void BQ769x2_WriteCellBalance(uint16_t data){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	80fb      	strh	r3, [r7, #6]

	handle_subcommands(CB_SET_LVL, data, W2);
 80002ca:	88fb      	ldrh	r3, [r7, #6]
 80002cc:	2202      	movs	r2, #2
 80002ce:	4619      	mov	r1, r3
 80002d0:	2084      	movs	r0, #132	@ 0x84
 80002d2:	f000 f90f 	bl	80004f4 <handle_subcommands>
	  HAL_Delay(5);
 80002d6:	2005      	movs	r0, #5
 80002d8:	f000 fe80 	bl	8000fdc <HAL_Delay>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <Checksum>:
 * @param  len  length of the array
 * @retval checksum byte
 * @note   checksum is the inverse of the sum of the bytes.
 */

	uint8_t Checksum(uint8_t *data, uint8_t length) {
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
	    uint8_t crc = 0x00;  // Initialize CRC to 0
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]
	    uint8_t polynomial = 0x07;  // Polynomial x^8 + x^2 + x + 1
 80002f4:	2307      	movs	r3, #7
 80002f6:	733b      	strb	r3, [r7, #12]

	    for (uint8_t i = 0; i < length; i++) {
 80002f8:	2300      	movs	r3, #0
 80002fa:	73bb      	strb	r3, [r7, #14]
 80002fc:	e022      	b.n	8000344 <Checksum+0x60>
	        crc ^= data[i];
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	4413      	add	r3, r2
 8000304:	781a      	ldrb	r2, [r3, #0]
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	4053      	eors	r3, r2
 800030a:	73fb      	strb	r3, [r7, #15]
	        for (uint8_t j = 0; j < 8; j++) {
 800030c:	2300      	movs	r3, #0
 800030e:	737b      	strb	r3, [r7, #13]
 8000310:	e012      	b.n	8000338 <Checksum+0x54>
	            if (crc & 0x80) {
 8000312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000316:	2b00      	cmp	r3, #0
 8000318:	da08      	bge.n	800032c <Checksum+0x48>
	                crc = (crc << 1) ^ polynomial;
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	b25a      	sxtb	r2, r3
 8000320:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000324:	4053      	eors	r3, r2
 8000326:	b25b      	sxtb	r3, r3
 8000328:	73fb      	strb	r3, [r7, #15]
 800032a:	e002      	b.n	8000332 <Checksum+0x4e>
	            } else {
	                crc <<= 1;
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	73fb      	strb	r3, [r7, #15]
	        for (uint8_t j = 0; j < 8; j++) {
 8000332:	7b7b      	ldrb	r3, [r7, #13]
 8000334:	3301      	adds	r3, #1
 8000336:	737b      	strb	r3, [r7, #13]
 8000338:	7b7b      	ldrb	r3, [r7, #13]
 800033a:	2b07      	cmp	r3, #7
 800033c:	d9e9      	bls.n	8000312 <Checksum+0x2e>
	    for (uint8_t i = 0; i < length; i++) {
 800033e:	7bbb      	ldrb	r3, [r7, #14]
 8000340:	3301      	adds	r3, #1
 8000342:	73bb      	strb	r3, [r7, #14]
 8000344:	7bba      	ldrb	r2, [r7, #14]
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	429a      	cmp	r2, r3
 800034a:	d3d8      	bcc.n	80002fe <Checksum+0x1a>
	            }
	        }
	    }
	    return crc;
 800034c:	7bfb      	ldrb	r3, [r7, #15]
	}
 800034e:	4618      	mov	r0, r3
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
	...

0800035c <BQ769x2_SetRegister>:
 * @param  reg_data data to be written
 * @param  datalen number of bytes to write
 * @retval None
 */
void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	80fb      	strh	r3, [r7, #6]
 8000368:	4613      	mov	r3, r2
 800036a:	717b      	strb	r3, [r7, #5]
	uint8_t TX_Buffer[2] = {0x00, 0x00};
 800036c:	2300      	movs	r3, #0
 800036e:	82bb      	strh	r3, [r7, #20]
	uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000370:	4a46      	ldr	r2, [pc, #280]	@ (800048c <BQ769x2_SetRegister+0x130>)
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037a:	6018      	str	r0, [r3, #0]
 800037c:	3304      	adds	r3, #4
 800037e:	8019      	strh	r1, [r3, #0]

	//TX_RegData in little endian format
	TX_RegData[0] = reg_addr & 0xff;
 8000380:	88fb      	ldrh	r3, [r7, #6]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	733b      	strb	r3, [r7, #12]
	TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	737b      	strb	r3, [r7, #13]
	TX_RegData[2] = reg_data & 0xff; //1st byte of data
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	73bb      	strb	r3, [r7, #14]

	switch(datalen)
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	2b04      	cmp	r3, #4
 800039a:	d048      	beq.n	800042e <BQ769x2_SetRegister+0xd2>
 800039c:	2b04      	cmp	r3, #4
 800039e:	dc71      	bgt.n	8000484 <BQ769x2_SetRegister+0x128>
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d002      	beq.n	80003aa <BQ769x2_SetRegister+0x4e>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d01f      	beq.n	80003e8 <BQ769x2_SetRegister+0x8c>
			TX_Buffer[1] = 0x08; //combined length of register address and data
      		SPI_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
      		HAL_Delay(20);
			break;
    }
}
 80003a8:	e06c      	b.n	8000484 <BQ769x2_SetRegister+0x128>
      		SPI_WriteReg(0x3E, TX_RegData, 3);
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2203      	movs	r2, #3
 80003b0:	4619      	mov	r1, r3
 80003b2:	203e      	movs	r0, #62	@ 0x3e
 80003b4:	f000 f9bc 	bl	8000730 <SPI_WriteReg>
      		HAL_Delay(20);
 80003b8:	2014      	movs	r0, #20
 80003ba:	f000 fe0f 	bl	8000fdc <HAL_Delay>
			TX_Buffer[0] = Checksum(TX_RegData, 3);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	2103      	movs	r1, #3
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff8d 	bl	80002e4 <Checksum>
 80003ca:	4603      	mov	r3, r0
 80003cc:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x05; //combined length of register address and data
 80003ce:	2305      	movs	r3, #5
 80003d0:	757b      	strb	r3, [r7, #21]
      		SPI_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	2202      	movs	r2, #2
 80003d8:	4619      	mov	r1, r3
 80003da:	2060      	movs	r0, #96	@ 0x60
 80003dc:	f000 f9a8 	bl	8000730 <SPI_WriteReg>
      		HAL_Delay(20);
 80003e0:	2014      	movs	r0, #20
 80003e2:	f000 fdfb 	bl	8000fdc <HAL_Delay>
			break;
 80003e6:	e04d      	b.n	8000484 <BQ769x2_SetRegister+0x128>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	0a1b      	lsrs	r3, r3, #8
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	73fb      	strb	r3, [r7, #15]
			SPI_WriteReg(0x3E, TX_RegData, 4);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	2204      	movs	r2, #4
 80003f6:	4619      	mov	r1, r3
 80003f8:	203e      	movs	r0, #62	@ 0x3e
 80003fa:	f000 f999 	bl	8000730 <SPI_WriteReg>
			HAL_Delay(20);
 80003fe:	2014      	movs	r0, #20
 8000400:	f000 fdec 	bl	8000fdc <HAL_Delay>
			TX_Buffer[0] = Checksum(TX_RegData, 4);
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	2104      	movs	r1, #4
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff6a 	bl	80002e4 <Checksum>
 8000410:	4603      	mov	r3, r0
 8000412:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x06; //combined length of register address and data
 8000414:	2306      	movs	r3, #6
 8000416:	757b      	strb	r3, [r7, #21]
      		SPI_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	2202      	movs	r2, #2
 800041e:	4619      	mov	r1, r3
 8000420:	2060      	movs	r0, #96	@ 0x60
 8000422:	f000 f985 	bl	8000730 <SPI_WriteReg>
      		HAL_Delay(20);
 8000426:	2014      	movs	r0, #20
 8000428:	f000 fdd8 	bl	8000fdc <HAL_Delay>
			break;
 800042c:	e02a      	b.n	8000484 <BQ769x2_SetRegister+0x128>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	0a1b      	lsrs	r3, r3, #8
 8000432:	b2db      	uxtb	r3, r3
 8000434:	73fb      	strb	r3, [r7, #15]
			TX_RegData[4] = (reg_data >> 16) & 0xff;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	b2db      	uxtb	r3, r3
 800043c:	743b      	strb	r3, [r7, #16]
			TX_RegData[5] = (reg_data >> 24) & 0xff;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	0e1b      	lsrs	r3, r3, #24
 8000442:	b2db      	uxtb	r3, r3
 8000444:	747b      	strb	r3, [r7, #17]
			SPI_WriteReg(0x3E, TX_RegData, 6);
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	2206      	movs	r2, #6
 800044c:	4619      	mov	r1, r3
 800044e:	203e      	movs	r0, #62	@ 0x3e
 8000450:	f000 f96e 	bl	8000730 <SPI_WriteReg>
			HAL_Delay(20);
 8000454:	2014      	movs	r0, #20
 8000456:	f000 fdc1 	bl	8000fdc <HAL_Delay>
			TX_Buffer[0] = Checksum(TX_RegData, 6);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	2106      	movs	r1, #6
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff3f 	bl	80002e4 <Checksum>
 8000466:	4603      	mov	r3, r0
 8000468:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x08; //combined length of register address and data
 800046a:	2308      	movs	r3, #8
 800046c:	757b      	strb	r3, [r7, #21]
      		SPI_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2202      	movs	r2, #2
 8000474:	4619      	mov	r1, r3
 8000476:	2060      	movs	r0, #96	@ 0x60
 8000478:	f000 f95a 	bl	8000730 <SPI_WriteReg>
      		HAL_Delay(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 fdad 	bl	8000fdc <HAL_Delay>
			break;
 8000482:	bf00      	nop
}
 8000484:	bf00      	nop
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	080042a4 	.word	0x080042a4

08000490 <handle_direct_commands>:
 * @param  type R = read, W = write
 * @retval None
 * @note   see the TRM or the BQ76952 header file for a full list of Direct Commands
 */
void handle_direct_commands(uint8_t command, uint16_t data, uint8_t type)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
 800049a:	460b      	mov	r3, r1
 800049c:	80bb      	strh	r3, [r7, #4]
 800049e:	4613      	mov	r3, r2
 80004a0:	71bb      	strb	r3, [r7, #6]
	uint8_t TX_data[2] = {0x00, 0x00};
 80004a2:	2300      	movs	r3, #0
 80004a4:	81bb      	strh	r3, [r7, #12]

	//little endian format
	TX_data[0] = data & 0xff;
 80004a6:	88bb      	ldrh	r3, [r7, #4]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	733b      	strb	r3, [r7, #12]
	TX_data[1] = (data >> 8) & 0xff;
 80004ac:	88bb      	ldrh	r3, [r7, #4]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	737b      	strb	r3, [r7, #13]

	if (type == R) {//Read
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d108      	bne.n	80004ce <handle_direct_commands+0x3e>
		SPI_ReadReg(command, RX_data, 2);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	2202      	movs	r2, #2
 80004c0:	490b      	ldr	r1, [pc, #44]	@ (80004f0 <handle_direct_commands+0x60>)
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f9d4 	bl	8000870 <SPI_ReadReg>
		HAL_Delay(20);
 80004c8:	2014      	movs	r0, #20
 80004ca:	f000 fd87 	bl	8000fdc <HAL_Delay>
	}
	if (type == W) {//write
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d109      	bne.n	80004e8 <handle_direct_commands+0x58>
    //Control_status, alarm_status, alarm_enable all 2 bytes long
		SPI_WriteReg(command,TX_data,2);
 80004d4:	f107 010c 	add.w	r1, r7, #12
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2202      	movs	r2, #2
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f927 	bl	8000730 <SPI_WriteReg>
		HAL_Delay(20);
 80004e2:	2014      	movs	r0, #20
 80004e4:	f000 fd7a 	bl	8000fdc <HAL_Delay>
	}
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000028 	.word	0x20000028

080004f4 <handle_subcommands>:
 * @note   writes the subcommand in subcommand address and reads or writes
 *         data
 */
void handle_subcommands(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
 80004fe:	460b      	mov	r3, r1
 8000500:	80bb      	strh	r3, [r7, #4]
 8000502:	4613      	mov	r3, r2
 8000504:	70fb      	strb	r3, [r7, #3]
	//security keys and Manu_data writes dont work with this function (reading these commands works)
	//max readback size is 32 bytes i.e. DASTATUS, CUV/COV snapshot
	uint8_t TX_Reg[4] = {0x00, 0x00, 0x00, 0x00};
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	uint8_t TX_Buffer[2] = {0x00, 0x00};
 800050a:	2300      	movs	r3, #0
 800050c:	813b      	strh	r3, [r7, #8]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	733b      	strb	r3, [r7, #12]
	TX_Reg[1] = (command >> 8) & 0xff;
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	0a1b      	lsrs	r3, r3, #8
 8000518:	b29b      	uxth	r3, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	737b      	strb	r3, [r7, #13]

	if (type == R) {//read
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10f      	bne.n	8000544 <handle_subcommands+0x50>
		SPI_WriteReg(0x3E,TX_Reg,2);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2202      	movs	r2, #2
 800052a:	4619      	mov	r1, r3
 800052c:	203e      	movs	r0, #62	@ 0x3e
 800052e:	f000 f8ff 	bl	8000730 <SPI_WriteReg>
		HAL_Delay(20);
 8000532:	2014      	movs	r0, #20
 8000534:	f000 fd52 	bl	8000fdc <HAL_Delay>
		SPI_ReadReg(0x40, RX_32Byte, 32); //RX_32Byte is a global variable
 8000538:	2220      	movs	r2, #32
 800053a:	492b      	ldr	r1, [pc, #172]	@ (80005e8 <handle_subcommands+0xf4>)
 800053c:	2040      	movs	r0, #64	@ 0x40
 800053e:	f000 f997 	bl	8000870 <SPI_ReadReg>
		TX_Buffer[0] = Checksum(TX_Reg, 4);
		TX_Buffer[1] = 0x06; //combined length of registers address and data
		SPI_WriteReg(0x60, TX_Buffer, 2);
		HAL_Delay(20);
	}
}
 8000542:	e04d      	b.n	80005e0 <handle_subcommands+0xec>
	else if (type == W) {
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d121      	bne.n	800058e <handle_subcommands+0x9a>
		TX_Reg[2] = data & 0xff;
 800054a:	88bb      	ldrh	r3, [r7, #4]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	73bb      	strb	r3, [r7, #14]
		SPI_WriteReg(0x3E,TX_Reg,3);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2203      	movs	r2, #3
 8000556:	4619      	mov	r1, r3
 8000558:	203e      	movs	r0, #62	@ 0x3e
 800055a:	f000 f8e9 	bl	8000730 <SPI_WriteReg>
		HAL_Delay(20);
 800055e:	2014      	movs	r0, #20
 8000560:	f000 fd3c 	bl	8000fdc <HAL_Delay>
		TX_Buffer[0] = Checksum(TX_Reg, 3);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2103      	movs	r1, #3
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff feba 	bl	80002e4 <Checksum>
 8000570:	4603      	mov	r3, r0
 8000572:	723b      	strb	r3, [r7, #8]
		TX_Buffer[1] = 0x05; //combined length of registers address and data
 8000574:	2305      	movs	r3, #5
 8000576:	727b      	strb	r3, [r7, #9]
		SPI_WriteReg(0x60, TX_Buffer, 2);
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	2202      	movs	r2, #2
 800057e:	4619      	mov	r1, r3
 8000580:	2060      	movs	r0, #96	@ 0x60
 8000582:	f000 f8d5 	bl	8000730 <SPI_WriteReg>
		HAL_Delay(10);
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fd28 	bl	8000fdc <HAL_Delay>
}
 800058c:	e028      	b.n	80005e0 <handle_subcommands+0xec>
	else if (type == W2){ //write data with 2 bytes
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d125      	bne.n	80005e0 <handle_subcommands+0xec>
		TX_Reg[2] = data & 0xff;
 8000594:	88bb      	ldrh	r3, [r7, #4]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	73bb      	strb	r3, [r7, #14]
		TX_Reg[3] = (data >> 8) & 0xff;
 800059a:	88bb      	ldrh	r3, [r7, #4]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	73fb      	strb	r3, [r7, #15]
		SPI_WriteReg(0x3E,TX_Reg,4);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2204      	movs	r2, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	203e      	movs	r0, #62	@ 0x3e
 80005ae:	f000 f8bf 	bl	8000730 <SPI_WriteReg>
		HAL_Delay(20);
 80005b2:	2014      	movs	r0, #20
 80005b4:	f000 fd12 	bl	8000fdc <HAL_Delay>
		TX_Buffer[0] = Checksum(TX_Reg, 4);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe90 	bl	80002e4 <Checksum>
 80005c4:	4603      	mov	r3, r0
 80005c6:	723b      	strb	r3, [r7, #8]
		TX_Buffer[1] = 0x06; //combined length of registers address and data
 80005c8:	2306      	movs	r3, #6
 80005ca:	727b      	strb	r3, [r7, #9]
		SPI_WriteReg(0x60, TX_Buffer, 2);
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2202      	movs	r2, #2
 80005d2:	4619      	mov	r1, r3
 80005d4:	2060      	movs	r0, #96	@ 0x60
 80005d6:	f000 f8ab 	bl	8000730 <SPI_WriteReg>
		HAL_Delay(20);
 80005da:	2014      	movs	r0, #20
 80005dc:	f000 fcfe 	bl	8000fdc <HAL_Delay>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000002c 	.word	0x2000002c

080005ec <handle_command_only_subcommands>:
 * @param  command sub-command to be written
 * @retval None
 * @note   writes the subcommands in subcommand address.
 *         subcommands that are only used to initiate an action
 */
void handle_command_only_subcommands(uint16_t command){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	//For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
	uint8_t TX_Reg[2] = {0x00, 0x00};
 80005f6:	2300      	movs	r3, #0
 80005f8:	81bb      	strh	r3, [r7, #12]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	733b      	strb	r3, [r7, #12]
	TX_Reg[1] = (command >> 8) & 0xff;
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	b29b      	uxth	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	737b      	strb	r3, [r7, #13]

	SPI_WriteReg(Subcommand_address,TX_Reg,2);  //subcommand address - 0x3E & 0x3F
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2202      	movs	r2, #2
 8000610:	4619      	mov	r1, r3
 8000612:	203e      	movs	r0, #62	@ 0x3e
 8000614:	f000 f88c 	bl	8000730 <SPI_WriteReg>
	HAL_Delay(20);
 8000618:	2014      	movs	r0, #20
 800061a:	f000 fcdf 	bl	8000fdc <HAL_Delay>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <BQ769x2_Init>:
/**
 * @brief  function for initial setup of registers
 * @param  None
 * @retval None
 */
void BQ769x2_Init(void) {
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
	// Configures all parameters in device RAM

	// Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
	// See TRM for full description of CONFIG_UPDATE mode
	handle_command_only_subcommands(SET_CFGUPDATE);
 800062a:	2090      	movs	r0, #144	@ 0x90
 800062c:	f7ff ffde 	bl	80005ec <handle_command_only_subcommands>
	// a full description of the register and the bits will pop up on the screen.

	// 'Power Config' - 0x9234 = 0x2D80
	// Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
  	// Set wake speed bits to 00 for best performance
	BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 8000630:	2202      	movs	r2, #2
 8000632:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8000636:	f249 2034 	movw	r0, #37428	@ 0x9234
 800063a:	f7ff fe8f 	bl	800035c <BQ769x2_SetRegister>

	// 'REG0 Config' - set REG0_EN bit to enable pre-regulator
	BQ769x2_SetRegister(REG0Config, 0x01, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	f249 2037 	movw	r0, #37431	@ 0x9237
 8000646:	f7ff fe89 	bl	800035c <BQ769x2_SetRegister>

	// 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
	BQ769x2_SetRegister(REG12Config, 0x0D, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	210d      	movs	r1, #13
 800064e:	f249 2036 	movw	r0, #37430	@ 0x9236
 8000652:	f7ff fe83 	bl	800035c <BQ769x2_SetRegister>

	// Set DFETOFF pin to control BOTH CHG and DSG FET - 0x92FB = 0x42 (set to 0x00 to disable)
	BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2142      	movs	r1, #66	@ 0x42
 800065a:	f249 20fb 	movw	r0, #37627	@ 0x92fb
 800065e:	f7ff fe7d 	bl	800035c <BQ769x2_SetRegister>

	// Set up ALERT Pin - 0x92FC = 0x2A
	// This configures the ALERT pin to drive high (REG1 voltage) when enabled.
	// The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
	BQ769x2_SetRegister(ALERTPinConfig, 0x2A, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	212a      	movs	r1, #42	@ 0x2a
 8000666:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 800066a:	f7ff fe77 	bl	800035c <BQ769x2_SetRegister>

	// Set TS1 to measure Cell Temperature - 0x92FD = 0x07
	BQ769x2_SetRegister(TS1Config, 0x07, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	2107      	movs	r1, #7
 8000672:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 8000676:	f7ff fe71 	bl	800035c <BQ769x2_SetRegister>

	// Set TS3 to measure FET Temperature - 0x92FF = 0x0F
	BQ769x2_SetRegister(TS3Config, 0x0F, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	210f      	movs	r1, #15
 800067e:	f249 20ff 	movw	r0, #37631	@ 0x92ff
 8000682:	f7ff fe6b 	bl	800035c <BQ769x2_SetRegister>

	// Set HDQ to measure Cell Temperature - 0x9300 = 0x07
	BQ769x2_SetRegister(HDQPinConfig, 0x00, 1);   // No thermistor installed on EVM HDQ pin, so set to 0x00
 8000686:	2201      	movs	r2, #1
 8000688:	2100      	movs	r1, #0
 800068a:	f44f 4013 	mov.w	r0, #37632	@ 0x9300
 800068e:	f7ff fe65 	bl	800035c <BQ769x2_SetRegister>

	// 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
	BQ769x2_SetRegister(VCellMode, 0x0000, 2);
 8000692:	2202      	movs	r2, #2
 8000694:	2100      	movs	r1, #0
 8000696:	f249 3004 	movw	r0, #37636	@ 0x9304
 800069a:	f7ff fe5f 	bl	800035c <BQ769x2_SetRegister>

	// Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
	// Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
	// COV (over-voltage), CUV (under-voltage)
	BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	21bc      	movs	r1, #188	@ 0xbc
 80006a2:	f249 2061 	movw	r0, #37473	@ 0x9261
 80006a6:	f7ff fe59 	bl	800035c <BQ769x2_SetRegister>

	// Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
	// Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
	// OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
	BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	21f7      	movs	r1, #247	@ 0xf7
 80006ae:	f249 2062 	movw	r0, #37474	@ 0x9262
 80006b2:	f7ff fe53 	bl	800035c <BQ769x2_SetRegister>

	// 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
	BQ769x2_SetRegister(DefaultAlarmMask, 0xF882, 2);
 80006b6:	2202      	movs	r2, #2
 80006b8:	f64f 0182 	movw	r1, #63618	@ 0xf882
 80006bc:	f249 206d 	movw	r0, #37485	@ 0x926d
 80006c0:	f7ff fe4c 	bl	800035c <BQ769x2_SetRegister>

	// Set up Cell Balancing Configuration - 0x9335 = 0x03   -  Automated balancing while in Relax or Charge modes
	// Also see "Cell Balancing with BQ769x2 Battery Monitors" document on ti.com
	BQ769x2_SetRegister(BalancingConfiguration, 0x03, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2103      	movs	r1, #3
 80006c8:	f249 3035 	movw	r0, #37685	@ 0x9335
 80006cc:	f7ff fe46 	bl	800035c <BQ769x2_SetRegister>

	// Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
	// CUV Threshold is this value multiplied by 50.6mV
	BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2131      	movs	r1, #49	@ 0x31
 80006d4:	f249 2075 	movw	r0, #37493	@ 0x9275
 80006d8:	f7ff fe40 	bl	800035c <BQ769x2_SetRegister>

	// Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
	// COV Threshold is this value multiplied by 50.6mV
	BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	2155      	movs	r1, #85	@ 0x55
 80006e0:	f249 2078 	movw	r0, #37496	@ 0x9278
 80006e4:	f7ff fe3a 	bl	800035c <BQ769x2_SetRegister>

	// Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
	BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2105      	movs	r1, #5
 80006ec:	f249 2080 	movw	r0, #37504	@ 0x9280
 80006f0:	f7ff fe34 	bl	800035c <BQ769x2_SetRegister>

	// Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
	BQ769x2_SetRegister(OCD1Threshold, 0x0A, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	210a      	movs	r1, #10
 80006f8:	f249 2082 	movw	r0, #37506	@ 0x9282
 80006fc:	f7ff fe2e 	bl	800035c <BQ769x2_SetRegister>

	// Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
	BQ769x2_SetRegister(SCDThreshold, 0x05, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2105      	movs	r1, #5
 8000704:	f249 2086 	movw	r0, #37510	@ 0x9286
 8000708:	f7ff fe28 	bl	800035c <BQ769x2_SetRegister>

	// Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 �s; min value of 1
	BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	2103      	movs	r1, #3
 8000710:	f249 2087 	movw	r0, #37511	@ 0x9287
 8000714:	f7ff fe22 	bl	800035c <BQ769x2_SetRegister>

	// Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
	// If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
	BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	2101      	movs	r1, #1
 800071c:	f249 2095 	movw	r0, #37525	@ 0x9295
 8000720:	f7ff fe1c 	bl	800035c <BQ769x2_SetRegister>

	// Exit CONFIGUPDATE mode  - Subcommand 0x0092
	handle_command_only_subcommands(EXIT_CFGUPDATE);
 8000724:	2092      	movs	r0, #146	@ 0x92
 8000726:	f7ff ff61 	bl	80005ec <handle_command_only_subcommands>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <SPI_WriteReg>:
 * @param  reg_data pointer to data which is to be written
 * @param  count number of data bytes to be written
 * @retval None
 * @note   includes retries in case HFO has not started or if wait time is needed. See BQ76952 Software Development Guide for examples
 */
void SPI_WriteReg(uint8_t reg_addr,uint8_t* reg_data,uint8_t count){
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af02      	add	r7, sp, #8
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = 0x80 | reg_addr;      //set R/W bit high for writing + 7bit address
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t TX_Buffer[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800074a:	4a43      	ldr	r2, [pc, #268]	@ (8000858 <SPI_WriteReg+0x128>)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	ca07      	ldmia	r2, {r0, r1, r2}
 8000752:	c303      	stmia	r3!, {r0, r1}
 8000754:	801a      	strh	r2, [r3, #0]
	unsigned int i;
	unsigned int match = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
	unsigned int retries = 10;
 800075a:	230a      	movs	r3, #10
 800075c:	61bb      	str	r3, [r7, #24]
	hSPIx.Instance = SPI_used;
 800075e:	4b3f      	ldr	r3, [pc, #252]	@ (800085c <SPI_WriteReg+0x12c>)
 8000760:	4a3f      	ldr	r2, [pc, #252]	@ (8000860 <SPI_WriteReg+0x130>)
 8000762:	601a      	str	r2, [r3, #0]

    for(i=0; i<count; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
 8000768:	e06d      	b.n	8000846 <SPI_WriteReg+0x116>
    	TX_Buffer[0] = addr;
 800076a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800076e:	733b      	strb	r3, [r7, #12]
		TX_Buffer[1] = reg_data[i];
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	6a3b      	ldr	r3, [r7, #32]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	737b      	strb	r3, [r7, #13]

		HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,0);
 800077a:	2200      	movs	r2, #0
 800077c:	2104      	movs	r1, #4
 800077e:	4839      	ldr	r0, [pc, #228]	@ (8000864 <SPI_WriteReg+0x134>)
 8000780:	f000 ff2a 	bl	80015d8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi3, TX_Buffer, Rx_data, 2,HAL_MAX_DELAY);
 8000784:	f107 010c 	add.w	r1, r7, #12
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2302      	movs	r3, #2
 8000790:	4a35      	ldr	r2, [pc, #212]	@ (8000868 <SPI_WriteReg+0x138>)
 8000792:	4836      	ldr	r0, [pc, #216]	@ (800086c <SPI_WriteReg+0x13c>)
 8000794:	f002 fc75 	bl	8003082 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,1);
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	4831      	ldr	r0, [pc, #196]	@ (8000864 <SPI_WriteReg+0x134>)
 800079e:	f000 ff1b 	bl	80015d8 <HAL_GPIO_WritePin>

		while ((match == 0) & (retries > 0)) {
 80007a2:	e033      	b.n	800080c <SPI_WriteReg+0xdc>
			HAL_Delay(5);
 80007a4:	2005      	movs	r0, #5
 80007a6:	f000 fc19 	bl	8000fdc <HAL_Delay>
			HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2104      	movs	r1, #4
 80007ae:	482d      	ldr	r0, [pc, #180]	@ (8000864 <SPI_WriteReg+0x134>)
 80007b0:	f000 ff12 	bl	80015d8 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi3, TX_Buffer, Rx_data, 2,HAL_MAX_DELAY);
 80007b4:	f107 010c 	add.w	r1, r7, #12
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2302      	movs	r3, #2
 80007c0:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <SPI_WriteReg+0x138>)
 80007c2:	482a      	ldr	r0, [pc, #168]	@ (800086c <SPI_WriteReg+0x13c>)
 80007c4:	f002 fc5d 	bl	8003082 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2104      	movs	r1, #4
 80007cc:	4825      	ldr	r0, [pc, #148]	@ (8000864 <SPI_WriteReg+0x134>)
 80007ce:	f000 ff03 	bl	80015d8 <HAL_GPIO_WritePin>
			if ((Rx_data[0] == addr) & (Rx_data[1] == reg_data[i])){
 80007d2:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <SPI_WriteReg+0x138>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80007da:	429a      	cmp	r2, r3
 80007dc:	bf0c      	ite	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	2300      	movne	r3, #0
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <SPI_WriteReg+0x138>)
 80007e6:	7859      	ldrb	r1, [r3, #1]
 80007e8:	6838      	ldr	r0, [r7, #0]
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	4403      	add	r3, r0
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4299      	cmp	r1, r3
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4013      	ands	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SPI_WriteReg+0xd6>
				match = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
			}
			retries --;
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	3b01      	subs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
		while ((match == 0) & (retries > 0)) {
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf0c      	ite	eq
 8000812:	2301      	moveq	r3, #1
 8000814:	2300      	movne	r3, #0
 8000816:	b2da      	uxtb	r2, r3
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4013      	ands	r3, r2
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1bb      	bne.n	80007a4 <SPI_WriteReg+0x74>
		}

	    match = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
	    addr += 1;
 8000830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000834:	3301      	adds	r3, #1
 8000836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	    HAL_Delay(5);
 800083a:	2005      	movs	r0, #5
 800083c:	f000 fbce 	bl	8000fdc <HAL_Delay>
    for(i=0; i<count; i++) {
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	3301      	adds	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	6a3a      	ldr	r2, [r7, #32]
 800084a:	429a      	cmp	r2, r3
 800084c:	d38d      	bcc.n	800076a <SPI_WriteReg+0x3a>
	  }

}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	@ 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	080042ac 	.word	0x080042ac
 800085c:	20000074 	.word	0x20000074
 8000860:	40003c00 	.word	0x40003c00
 8000864:	48000c00 	.word	0x48000c00
 8000868:	20000090 	.word	0x20000090
 800086c:	20000094 	.word	0x20000094

08000870 <SPI_ReadReg>:
 * @param  reg_data pointer to data to store read bytes
 * @param  count number of data bytes to be read
 * @retval None
 * @note   includes retries in case HFO has not started or if wait time is needed. See BQ76952 Software Development Guide for examples
 */
void SPI_ReadReg(uint8_t reg_addr,uint8_t* reg_data,uint8_t count){
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
    uint8_t addr;
    uint8_t TX_Buffer[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000880:	4a3b      	ldr	r2, [pc, #236]	@ (8000970 <SPI_ReadReg+0x100>)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	ca07      	ldmia	r2, {r0, r1, r2}
 8000888:	c303      	stmia	r3!, {r0, r1}
 800088a:	801a      	strh	r2, [r3, #0]
    unsigned int i;
    unsigned int match;
    unsigned int retries = 10;
 800088c:	230a      	movs	r3, #10
 800088e:	61bb      	str	r3, [r7, #24]

    match = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
    addr = reg_addr;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    for(i=0; i<count; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	e05e      	b.n	800095e <SPI_ReadReg+0xee>
		TX_Buffer[0] = addr;
 80008a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008a4:	733b      	strb	r3, [r7, #12]
		TX_Buffer[1] = 0xFF;
 80008a6:	23ff      	movs	r3, #255	@ 0xff
 80008a8:	737b      	strb	r3, [r7, #13]

		HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	4831      	ldr	r0, [pc, #196]	@ (8000974 <SPI_ReadReg+0x104>)
 80008b0:	f000 fe92 	bl	80015d8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi3, TX_Buffer, Rx_data, 2,HAL_MAX_DELAY);
 80008b4:	f107 010c 	add.w	r1, r7, #12
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2302      	movs	r3, #2
 80008c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000978 <SPI_ReadReg+0x108>)
 80008c2:	482e      	ldr	r0, [pc, #184]	@ (800097c <SPI_ReadReg+0x10c>)
 80008c4:	f002 fbdd 	bl	8003082 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2104      	movs	r1, #4
 80008cc:	4829      	ldr	r0, [pc, #164]	@ (8000974 <SPI_ReadReg+0x104>)
 80008ce:	f000 fe83 	bl	80015d8 <HAL_GPIO_WritePin>

		while ((match == 0) & (retries > 0)) {
 80008d2:	e027      	b.n	8000924 <SPI_ReadReg+0xb4>
			HAL_Delay(5);
 80008d4:	2005      	movs	r0, #5
 80008d6:	f000 fb81 	bl	8000fdc <HAL_Delay>
			HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2104      	movs	r1, #4
 80008de:	4825      	ldr	r0, [pc, #148]	@ (8000974 <SPI_ReadReg+0x104>)
 80008e0:	f000 fe7a 	bl	80015d8 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi3, TX_Buffer, Rx_data, 2,HAL_MAX_DELAY);
 80008e4:	f107 010c 	add.w	r1, r7, #12
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2302      	movs	r3, #2
 80008f0:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <SPI_ReadReg+0x108>)
 80008f2:	4822      	ldr	r0, [pc, #136]	@ (800097c <SPI_ReadReg+0x10c>)
 80008f4:	f002 fbc5 	bl	8003082 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2104      	movs	r1, #4
 80008fc:	481d      	ldr	r0, [pc, #116]	@ (8000974 <SPI_ReadReg+0x104>)
 80008fe:	f000 fe6b 	bl	80015d8 <HAL_GPIO_WritePin>
			if (Rx_data[0] == addr) {
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <SPI_ReadReg+0x108>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800090a:	429a      	cmp	r2, r3
 800090c:	d107      	bne.n	800091e <SPI_ReadReg+0xae>
				match = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
				reg_data[i] = Rx_data[1];
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	4413      	add	r3, r2
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <SPI_ReadReg+0x108>)
 800091a:	7852      	ldrb	r2, [r2, #1]
 800091c:	701a      	strb	r2, [r3, #0]
			}
			retries --;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	3b01      	subs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
		while ((match == 0) & (retries > 0)) {
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf0c      	ite	eq
 800092a:	2301      	moveq	r3, #1
 800092c:	2300      	movne	r3, #0
 800092e:	b2da      	uxtb	r2, r3
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4013      	ands	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1c7      	bne.n	80008d4 <SPI_ReadReg+0x64>
		}
	match = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
	addr += 1;
 8000948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800094c:	3301      	adds	r3, #1
 800094e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_Delay(5);
 8000952:	2005      	movs	r0, #5
 8000954:	f000 fb42 	bl	8000fdc <HAL_Delay>
    for(i=0; i<count; i++) {
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	3301      	adds	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	6a3a      	ldr	r2, [r7, #32]
 8000962:	429a      	cmp	r2, r3
 8000964:	d39c      	bcc.n	80008a0 <SPI_ReadReg+0x30>
  }
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	080042ac 	.word	0x080042ac
 8000974:	48000c00 	.word	0x48000c00
 8000978:	20000090 	.word	0x20000090
 800097c:	20000094 	.word	0x20000094

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fac4 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f840 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f000 f90a 	bl	8000ba4 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000990:	f000 f89a 	bl	8000ac8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000994:	f000 f8d6 	bl	8000b44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CMU_CS_GPIO_Port,CMU_CS_Pin,1);
 8000998:	2201      	movs	r2, #1
 800099a:	2104      	movs	r1, #4
 800099c:	481a      	ldr	r0, [pc, #104]	@ (8000a08 <main+0x88>)
 800099e:	f000 fe1b 	bl	80015d8 <HAL_GPIO_WritePin>
  handle_command_only_subcommands(BQ769x2_RESET); // reset BQ769x2 chip
 80009a2:	2012      	movs	r0, #18
 80009a4:	f7ff fe22 	bl	80005ec <handle_command_only_subcommands>
  HAL_Delay(600);
 80009a8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80009ac:	f000 fb16 	bl	8000fdc <HAL_Delay>
  BQ769x2_Init();  // Configure all of the BQ769x2 register settings
 80009b0:	f7ff fe39 	bl	8000626 <BQ769x2_Init>
  HAL_Delay(600);
 80009b4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80009b8:	f000 fb10 	bl	8000fdc <HAL_Delay>
  handle_command_only_subcommands(FET_ENABLE); // Enable the CHG and DSG FETs
 80009bc:	2022      	movs	r0, #34	@ 0x22
 80009be:	f7ff fe15 	bl	80005ec <handle_command_only_subcommands>
  HAL_Delay(100);
 80009c2:	2064      	movs	r0, #100	@ 0x64
 80009c4:	f000 fb0a 	bl	8000fdc <HAL_Delay>
  handle_command_only_subcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 80009c8:	209a      	movs	r0, #154	@ 0x9a
 80009ca:	f7ff fe0f 	bl	80005ec <handle_command_only_subcommands>
    									   // demonstrate full-speed measurements in Normal mode.
  HAL_Delay(100);
 80009ce:	2064      	movs	r0, #100	@ 0x64
 80009d0:	f000 fb04 	bl	8000fdc <HAL_Delay>
  BQ769x2_WriteCellBalance(0x0070);
 80009d4:	2070      	movs	r0, #112	@ 0x70
 80009d6:	f7ff fc73 	bl	80002c0 <BQ769x2_WriteCellBalance>
  HAL_Delay(20);
 80009da:	2014      	movs	r0, #20
 80009dc:	f000 fafe 	bl	8000fdc <HAL_Delay>
  BQ769x2_WriteCellBalance(0x0070);
 80009e0:	2070      	movs	r0, #112	@ 0x70
 80009e2:	f7ff fc6d 	bl	80002c0 <BQ769x2_WriteCellBalance>
  HAL_Delay(20);
 80009e6:	2014      	movs	r0, #20
 80009e8:	f000 faf8 	bl	8000fdc <HAL_Delay>
    /* USER CODE BEGIN 3 */

	 // BQ7694203_ReadMultiple(0x14, data_to_read,1);
	 // SPI_TransmitReceive_CRC(0x7f, 0xff, &data_to_read);
	  //SPI_ReadWithCRC(0x12,&data_to_read);
	  BQ769x2_ReadAllVoltages(); //Read all available voltages
 80009ec:	f7ff fc1e 	bl	800022c <BQ769x2_ReadAllVoltages>
	  HAL_Delay(5);
 80009f0:	2005      	movs	r0, #5
 80009f2:	f000 faf3 	bl	8000fdc <HAL_Delay>
	  BQ769x2_ReadCellBalance();   //Read active cell being balanced
 80009f6:	f7ff fc57 	bl	80002a8 <BQ769x2_ReadCellBalance>
	  HAL_Delay(1000);
 80009fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009fe:	f000 faed 	bl	8000fdc <HAL_Delay>
	  BQ769x2_ReadAllVoltages(); //Read all available voltages
 8000a02:	bf00      	nop
 8000a04:	e7f2      	b.n	80009ec <main+0x6c>
 8000a06:	bf00      	nop
 8000a08:	48000c00 	.word	0x48000c00

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0a6      	sub	sp, #152	@ 0x98
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a16:	2228      	movs	r2, #40	@ 0x28
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fc09 	bl	8004232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2258      	movs	r2, #88	@ 0x58
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 fbfb 	bl	8004232 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a44:	2310      	movs	r3, #16
 8000a46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fdcc 	bl	8001608 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a76:	f000 f91d 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a94:	2101      	movs	r1, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fe0a 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aa2:	f000 f907 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 f81d 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000abc:	f000 f8fa 	bl	8000cb4 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3798      	adds	r7, #152	@ 0x98
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	@ (8000b40 <MX_SPI3_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000ae2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ae6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000afa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000afe:	2218      	movs	r2, #24
 8000b00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000b16:	2207      	movs	r2, #7
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000b22:	2208      	movs	r2, #8
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_SPI3_Init+0x74>)
 8000b28:	f002 fa00 	bl	8002f2c <HAL_SPI_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 f8bf 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	40003c00 	.word	0x40003c00

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f002 ff16 	bl	80039b8 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f88f 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000f8 	.word	0x200000f8
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a34      	ldr	r2, [pc, #208]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a28      	ldr	r2, [pc, #160]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2120      	movs	r1, #32
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3a:	f000 fccd 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CMU_CS_GPIO_Port, CMU_CS_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2104      	movs	r1, #4
 8000c42:	481a      	ldr	r0, [pc, #104]	@ (8000cac <MX_GPIO_Init+0x108>)
 8000c44:	f000 fcc8 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000c60:	f000 fb30 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c64:	2320      	movs	r3, #32
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7e:	f000 fb21 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CMU_CS_Pin */
  GPIO_InitStruct.Pin = CMU_CS_Pin;
 8000c82:	2304      	movs	r3, #4
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_GPIO_Init+0x108>)
 8000c9a:	f000 fb13 	bl	80012c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	48000800 	.word	0x48000800

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f000 fa64 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d130      	bne.n	8000d8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d4c:	6153      	str	r3, [r2, #20]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <HAL_SPI_MspInit+0x94>)
 8000d78:	f000 faa4 	bl	80012c4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2033      	movs	r0, #51	@ 0x33
 8000d82:	f000 fa2a 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d86:	2033      	movs	r0, #51	@ 0x33
 8000d88:	f000 fa43 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	@ 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40003c00 	.word	0x40003c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000800 	.word	0x48000800

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <HAL_UART_MspInit+0x7c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d128      	bne.n	8000e14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_UART_MspInit+0x80>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a16      	ldr	r2, [pc, #88]	@ (8000e20 <HAL_UART_MspInit+0x80>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_UART_MspInit+0x80>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <HAL_UART_MspInit+0x80>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a10      	ldr	r2, [pc, #64]	@ (8000e20 <HAL_UART_MspInit+0x80>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <HAL_UART_MspInit+0x80>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df2:	230c      	movs	r3, #12
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e02:	2307      	movs	r3, #7
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e10:	f000 fa58 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	@ 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40004400 	.word	0x40004400
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <NMI_Handler+0x4>

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7a:	f000 f88f 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <SPI3_IRQHandler+0x10>)
 8000e8a:	f002 fb1d 	bl	80034c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000094 	.word	0x20000094

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f003 f9ab 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eee:	f7ff fd47 	bl	8000980 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f00:	080042f8 	.word	0x080042f8
  ldr r2, =_sbss
 8000f04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f08:	20000184 	.word	0x20000184

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_Init+0x28>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_Init+0x28>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f94f 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fec8 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f967 	bl	800122e <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f92f 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000180 	.word	0x20000180

08000fc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000180 	.word	0x20000180

08000fdc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	@ (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001258:	2b02      	cmp	r3, #2
 800125a:	d005      	beq.n	8001268 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2204      	movs	r2, #4
 8001260:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e027      	b.n	80012b8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 020e 	bic.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001290:	2101      	movs	r1, #1
 8001292:	fa01 f202 	lsl.w	r2, r1, r2
 8001296:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	4798      	blx	r3
    }
  }
  return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	e160      	b.n	8001596 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8152 	beq.w	8001590 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d005      	beq.n	8001304 <HAL_GPIO_Init+0x40>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d130      	bne.n	8001366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 0201 	and.w	r2, r3, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b03      	cmp	r3, #3
 8001370:	d017      	beq.n	80013a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d123      	bne.n	80013f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	6939      	ldr	r1, [r7, #16]
 80013f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0203 	and.w	r2, r3, #3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80ac 	beq.w	8001590 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001438:	4b5e      	ldr	r3, [pc, #376]	@ (80015b4 <HAL_GPIO_Init+0x2f0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a5d      	ldr	r2, [pc, #372]	@ (80015b4 <HAL_GPIO_Init+0x2f0>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <HAL_GPIO_Init+0x2f0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001450:	4a59      	ldr	r2, [pc, #356]	@ (80015b8 <HAL_GPIO_Init+0x2f4>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800147a:	d025      	beq.n	80014c8 <HAL_GPIO_Init+0x204>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a4f      	ldr	r2, [pc, #316]	@ (80015bc <HAL_GPIO_Init+0x2f8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d01f      	beq.n	80014c4 <HAL_GPIO_Init+0x200>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a4e      	ldr	r2, [pc, #312]	@ (80015c0 <HAL_GPIO_Init+0x2fc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d019      	beq.n	80014c0 <HAL_GPIO_Init+0x1fc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a4d      	ldr	r2, [pc, #308]	@ (80015c4 <HAL_GPIO_Init+0x300>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1f8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4c      	ldr	r2, [pc, #304]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1f4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4b      	ldr	r2, [pc, #300]	@ (80015cc <HAL_GPIO_Init+0x308>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1f0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a4a      	ldr	r2, [pc, #296]	@ (80015d0 <HAL_GPIO_Init+0x30c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1ec>
 80014ac:	2306      	movs	r3, #6
 80014ae:	e00c      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014b0:	2307      	movs	r3, #7
 80014b2:	e00a      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014b4:	2305      	movs	r3, #5
 80014b6:	e008      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014bc:	2303      	movs	r3, #3
 80014be:	e004      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014c8:	2300      	movs	r3, #0
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014da:	4937      	ldr	r1, [pc, #220]	@ (80015b8 <HAL_GPIO_Init+0x2f4>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e8:	4b3a      	ldr	r3, [pc, #232]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800150c:	4a31      	ldr	r2, [pc, #196]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001512:	4b30      	ldr	r3, [pc, #192]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001536:	4a27      	ldr	r2, [pc, #156]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001560:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <HAL_GPIO_Init+0x310>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f47f ae97 	bne.w	80012d4 <HAL_GPIO_Init+0x10>
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	48000800 	.word	0x48000800
 80015c4:	48000c00 	.word	0x48000c00
 80015c8:	48001000 	.word	0x48001000
 80015cc:	48001400 	.word	0x48001400
 80015d0:	48001800 	.word	0x48001800
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800160e:	af00      	add	r7, sp, #0
 8001610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001614:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001618:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800161e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	f001 b83a 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001632:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 816f 	beq.w	8001922 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001644:	4bb5      	ldr	r3, [pc, #724]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b04      	cmp	r3, #4
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001650:	4bb2      	ldr	r3, [pc, #712]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d15c      	bne.n	8001716 <HAL_RCC_OscConfig+0x10e>
 800165c:	4baf      	ldr	r3, [pc, #700]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001668:	d155      	bne.n	8001716 <HAL_RCC_OscConfig+0x10e>
 800166a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800166e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800167e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	095b      	lsrs	r3, r3, #5
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <HAL_RCC_OscConfig+0x94>
 8001696:	4ba1      	ldr	r3, [pc, #644]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	e015      	b.n	80016c8 <HAL_RCC_OscConfig+0xc0>
 800169c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016a0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80016b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016b4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80016b8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80016c4:	4b95      	ldr	r3, [pc, #596]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016cc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80016d0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80016d4:	fa92 f2a2 	rbit	r2, r2
 80016d8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80016dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80016e0:	fab2 f282 	clz	r2, r2
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f042 0220 	orr.w	r2, r2, #32
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	f002 021f 	and.w	r2, r2, #31
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8111 	beq.w	8001920 <HAL_RCC_OscConfig+0x318>
 80016fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001702:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 8108 	bne.w	8001920 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	f000 bfc6 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x12e>
 8001728:	4b7c      	ldr	r3, [pc, #496]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a7b      	ldr	r2, [pc, #492]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e036      	b.n	80017a4 <HAL_RCC_OscConfig+0x19c>
 8001736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x158>
 8001746:	4b75      	ldr	r3, [pc, #468]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a74      	ldr	r2, [pc, #464]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b72      	ldr	r3, [pc, #456]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a71      	ldr	r2, [pc, #452]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e021      	b.n	80017a4 <HAL_RCC_OscConfig+0x19c>
 8001760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001764:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x184>
 8001772:	4b6a      	ldr	r3, [pc, #424]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a69      	ldr	r2, [pc, #420]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b67      	ldr	r3, [pc, #412]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a66      	ldr	r2, [pc, #408]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0x19c>
 800178c:	4b63      	ldr	r3, [pc, #396]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a62      	ldr	r2, [pc, #392]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b60      	ldr	r3, [pc, #384]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a5f      	ldr	r2, [pc, #380]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d059      	beq.n	8001868 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fc06 	bl	8000fc4 <HAL_GetTick>
 80017b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017be:	f7ff fc01 	bl	8000fc4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d902      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	f000 bf67 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
 80017d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80017e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d102      	bne.n	8001806 <HAL_RCC_OscConfig+0x1fe>
 8001800:	4b46      	ldr	r3, [pc, #280]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x22a>
 8001806:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800180a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800181a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800181e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001822:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800182e:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001836:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800183a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800183e:	fa92 f2a2 	rbit	r2, r2
 8001842:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001846:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800184a:	fab2 f282 	clz	r2, r2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f042 0220 	orr.w	r2, r2, #32
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f002 021f 	and.w	r2, r2, #31
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f202 	lsl.w	r2, r1, r2
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0ab      	beq.n	80017be <HAL_RCC_OscConfig+0x1b6>
 8001866:	e05c      	b.n	8001922 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fbac 	bl	8000fc4 <HAL_GetTick>
 800186c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001872:	f7ff fba7 	bl	8000fc4 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	@ 0x64
 8001880:	d902      	bls.n	8001888 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	f000 bf0d 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
 8001888:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800188c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800189c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x2b2>
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x2de>
 80018ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80018ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80018d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <HAL_RCC_OscConfig+0x314>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018ea:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80018ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80018f2:	fa92 f2a2 	rbit	r2, r2
 80018f6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80018fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80018fe:	fab2 f282 	clz	r2, r2
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f042 0220 	orr.w	r2, r2, #32
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f002 021f 	and.w	r2, r2, #31
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ab      	bne.n	8001872 <HAL_RCC_OscConfig+0x26a>
 800191a:	e002      	b.n	8001922 <HAL_RCC_OscConfig+0x31a>
 800191c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001926:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 817f 	beq.w	8001c36 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001938:	4ba7      	ldr	r3, [pc, #668]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00c      	beq.n	800195e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001944:	4ba4      	ldr	r3, [pc, #656]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d173      	bne.n	8001a38 <HAL_RCC_OscConfig+0x430>
 8001950:	4ba1      	ldr	r3, [pc, #644]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800195c:	d16c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x430>
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001970:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d102      	bne.n	800198e <HAL_RCC_OscConfig+0x386>
 8001988:	4b93      	ldr	r3, [pc, #588]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e013      	b.n	80019b6 <HAL_RCC_OscConfig+0x3ae>
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80019a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80019b2:	4b89      	ldr	r3, [pc, #548]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	2202      	movs	r2, #2
 80019b8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80019bc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80019c0:	fa92 f2a2 	rbit	r2, r2
 80019c4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80019c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80019cc:	fab2 f282 	clz	r2, r2
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f042 0220 	orr.w	r2, r2, #32
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f002 021f 	and.w	r2, r2, #31
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <HAL_RCC_OscConfig+0x3f6>
 80019e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d002      	beq.n	80019fe <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 be52 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b76      	ldr	r3, [pc, #472]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	21f8      	movs	r1, #248	@ 0xf8
 8001a14:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001a1c:	fa91 f1a1 	rbit	r1, r1
 8001a20:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001a24:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a28:	fab1 f181 	clz	r1, r1
 8001a2c:	b2c9      	uxtb	r1, r1
 8001a2e:	408b      	lsls	r3, r1
 8001a30:	4969      	ldr	r1, [pc, #420]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	e0fe      	b.n	8001c36 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8088 	beq.w	8001b5a <HAL_RCC_OscConfig+0x552>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001a5c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a6a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	2301      	movs	r3, #1
 8001a74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff faa5 	bl	8000fc4 <HAL_GetTick>
 8001a7a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff faa0 	bl	8000fc4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d902      	bls.n	8001a96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f000 be06 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001aa8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4be>
 8001ac0:	4b45      	ldr	r3, [pc, #276]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e013      	b.n	8001aee <HAL_RCC_OscConfig+0x4e6>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ade:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	2202      	movs	r2, #2
 8001af0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001af4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001af8:	fa92 f2a2 	rbit	r2, r2
 8001afc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b00:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b04:	fab2 f282 	clz	r2, r2
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f002 021f 	and.w	r2, r2, #31
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0af      	beq.n	8001a80 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	21f8      	movs	r1, #248	@ 0xf8
 8001b36:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001b3e:	fa91 f1a1 	rbit	r1, r1
 8001b42:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001b46:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b4a:	fab1 f181 	clz	r1, r1
 8001b4e:	b2c9      	uxtb	r1, r1
 8001b50:	408b      	lsls	r3, r1
 8001b52:	4921      	ldr	r1, [pc, #132]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e06d      	b.n	8001c36 <HAL_RCC_OscConfig+0x62e>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001b6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	461a      	mov	r2, r3
 8001b82:	2300      	movs	r3, #0
 8001b84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fa1d 	bl	8000fc4 <HAL_GetTick>
 8001b8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff fa18 	bl	8000fc4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d902      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	f000 bd7e 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001bb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5d4>
 8001bd0:	4b01      	ldr	r3, [pc, #4]	@ (8001bd8 <HAL_RCC_OscConfig+0x5d0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	e016      	b.n	8001c04 <HAL_RCC_OscConfig+0x5fc>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001bf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c00:	4bbf      	ldr	r3, [pc, #764]	@ (8001f00 <HAL_RCC_OscConfig+0x8f8>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	2202      	movs	r2, #2
 8001c06:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001c0e:	fa92 f2a2 	rbit	r2, r2
 8001c12:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001c16:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c1a:	fab2 f282 	clz	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f042 0220 	orr.w	r2, r2, #32
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f002 021f 	and.w	r2, r2, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ac      	bne.n	8001b90 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8113 	beq.w	8001e72 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d07c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x74e>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001c6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4ba2      	ldr	r3, [pc, #648]	@ (8001f04 <HAL_RCC_OscConfig+0x8fc>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	2301      	movs	r3, #1
 8001c84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7ff f99d 	bl	8000fc4 <HAL_GetTick>
 8001c8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff f998 	bl	8000fc4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d902      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f000 bcfe 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001cb0:	fa93 f2a3 	rbit	r2, r3
 8001cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	4b7e      	ldr	r3, [pc, #504]	@ (8001f00 <HAL_RCC_OscConfig+0x8f8>)
 8001d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d12:	2102      	movs	r1, #2
 8001d14:	6019      	str	r1, [r3, #0]
 8001d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f1a3 	rbit	r1, r3
 8001d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d2c:	6019      	str	r1, [r3, #0]
  return result;
 8001d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d09d      	beq.n	8001c90 <HAL_RCC_OscConfig+0x688>
 8001d54:	e08d      	b.n	8001e72 <HAL_RCC_OscConfig+0x86a>
 8001d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d78:	601a      	str	r2, [r3, #0]
  return result;
 8001d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d82:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x8fc>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	461a      	mov	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff f914 	bl	8000fc4 <HAL_GetTick>
 8001d9c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff f90f 	bl	8000fc4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d902      	bls.n	8001db8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	f000 bc75 	b.w	80026a2 <HAL_RCC_OscConfig+0x109a>
 8001db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dbc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001de4:	2202      	movs	r2, #2
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e08:	2202      	movs	r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	4b36      	ldr	r3, [pc, #216]	@ (8001f00 <HAL_RCC_OscConfig+0x8f8>)
 8001e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e30:	2102      	movs	r1, #2
 8001e32:	6019      	str	r1, [r3, #0]
 8001e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f1a3 	rbit	r1, r3
 8001e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e46:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e4a:	6019      	str	r1, [r3, #0]
  return result;
 8001e4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e50:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d197      	bne.n	8001da2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 81a5 	beq.w	80021d2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_RCC_OscConfig+0x8f8>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_OscConfig+0x8f8>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <HAL_RCC_OscConfig+0x8f8>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <HAL_RCC_OscConfig+0x8f8>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_RCC_OscConfig+0x900>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d121      	bne.n	8001f18 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_RCC_OscConfig+0x900>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x900>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ede:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f870 	bl	8000fc4 <HAL_GetTick>
 8001ee4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	e010      	b.n	8001f0c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eea:	f7ff f86b 	bl	8000fc4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d908      	bls.n	8001f0c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e3d1      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	10908120 	.word	0x10908120
 8001f08:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8002144 <HAL_RCC_OscConfig+0xb3c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0e8      	beq.n	8001eea <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x92e>
 8001f28:	4b87      	ldr	r3, [pc, #540]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a86      	ldr	r2, [pc, #536]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	e035      	b.n	8001fa2 <HAL_RCC_OscConfig+0x99a>
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x958>
 8001f46:	4b80      	ldr	r3, [pc, #512]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a7f      	ldr	r2, [pc, #508]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b7d      	ldr	r3, [pc, #500]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a7c      	ldr	r2, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	e020      	b.n	8001fa2 <HAL_RCC_OscConfig+0x99a>
 8001f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x982>
 8001f70:	4b75      	ldr	r3, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a74      	ldr	r2, [pc, #464]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	4b72      	ldr	r3, [pc, #456]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a71      	ldr	r2, [pc, #452]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x99a>
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	4b6c      	ldr	r3, [pc, #432]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8081 	beq.w	80020b6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f806 	bl	8000fc4 <HAL_GetTick>
 8001fb8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff f801 	bl	8000fc4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e365      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
 8001fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fde:	2202      	movs	r2, #2
 8001fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	fa93 f2a3 	rbit	r2, r3
 8001ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002002:	2202      	movs	r2, #2
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002018:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800201c:	601a      	str	r2, [r3, #0]
  return result;
 800201e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002022:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002026:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d102      	bne.n	8002042 <HAL_RCC_OscConfig+0xa3a>
 800203c:	4b42      	ldr	r3, [pc, #264]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	e013      	b.n	800206a <HAL_RCC_OscConfig+0xa62>
 8002042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002046:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002052:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002060:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800206e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002072:	2102      	movs	r1, #2
 8002074:	6011      	str	r1, [r2, #0]
 8002076:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800207a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	fa92 f1a2 	rbit	r1, r2
 8002084:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002088:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800208c:	6011      	str	r1, [r2, #0]
  return result;
 800208e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002092:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d084      	beq.n	8001fbe <HAL_RCC_OscConfig+0x9b6>
 80020b4:	e083      	b.n	80021be <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7fe ff85 	bl	8000fc4 <HAL_GetTick>
 80020ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7fe ff80 	bl	8000fc4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e2e4      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
 80020d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020dc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80020e0:	2202      	movs	r2, #2
 80020e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002100:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002104:	2202      	movs	r2, #2
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800211e:	601a      	str	r2, [r3, #0]
  return result;
 8002120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002124:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002128:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0xb44>
 800213e:	4b02      	ldr	r3, [pc, #8]	@ (8002148 <HAL_RCC_OscConfig+0xb40>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	e017      	b.n	8002174 <HAL_RCC_OscConfig+0xb6c>
 8002144:	40007000 	.word	0x40007000
 8002148:	40021000 	.word	0x40021000
 800214c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002150:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002154:	2202      	movs	r2, #2
 8002156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4bb3      	ldr	r3, [pc, #716]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002178:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800217c:	2102      	movs	r1, #2
 800217e:	6011      	str	r1, [r2, #0]
 8002180:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002184:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	fa92 f1a2 	rbit	r1, r2
 800218e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002192:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002196:	6011      	str	r1, [r2, #0]
  return result;
 8002198:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800219c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f002 021f 	and.w	r2, r2, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d180      	bne.n	80020c0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021be:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a9d      	ldr	r2, [pc, #628]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 825e 	beq.w	80026a0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b96      	ldr	r3, [pc, #600]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	f000 821f 	beq.w	8002630 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 8170 	bne.w	80024e4 <HAL_RCC_OscConfig+0xedc>
 8002204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002208:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800220c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002216:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002224:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002228:	601a      	str	r2, [r3, #0]
  return result;
 800222a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002232:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800223e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	461a      	mov	r2, r3
 8002246:	2300      	movs	r3, #0
 8002248:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe febb 	bl	8000fc4 <HAL_GetTick>
 800224e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	e009      	b.n	8002268 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe feb6 	bl	8000fc4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e21c      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
 8002268:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002270:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002288:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800228c:	601a      	str	r2, [r3, #0]
  return result;
 800228e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002292:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002296:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_OscConfig+0xcaa>
 80022ac:	4b64      	ldr	r3, [pc, #400]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	e027      	b.n	8002302 <HAL_RCC_OscConfig+0xcfa>
 80022b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022dc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	4b50      	ldr	r3, [pc, #320]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002306:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800230a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800230e:	6011      	str	r1, [r2, #0]
 8002310:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002314:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	fa92 f1a2 	rbit	r1, r2
 800231e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002322:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002326:	6011      	str	r1, [r2, #0]
  return result;
 8002328:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800232c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f042 0220 	orr.w	r2, r2, #32
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f002 021f 	and.w	r2, r2, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d182      	bne.n	8002254 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234e:	4b3c      	ldr	r3, [pc, #240]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 8002350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002352:	f023 020f 	bic.w	r2, r3, #15
 8002356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 8002364:	4313      	orrs	r3, r2
 8002366:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002368:	4b35      	ldr	r3, [pc, #212]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002374:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a19      	ldr	r1, [r3, #32]
 800237c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002380:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	430b      	orrs	r3, r1
 800238a:	492d      	ldr	r1, [pc, #180]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002394:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002398:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800239c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023b4:	601a      	str	r2, [r3, #0]
  return result;
 80023b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023be:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	2301      	movs	r3, #1
 80023d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fdf5 	bl	8000fc4 <HAL_GetTick>
 80023da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023de:	e009      	b.n	80023f4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fdf0 	bl	8000fc4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e156      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
 80023f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80023fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002406:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002414:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002418:	601a      	str	r2, [r3, #0]
  return result;
 800241a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002422:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <HAL_RCC_OscConfig+0xe3c>
 8002438:	4b01      	ldr	r3, [pc, #4]	@ (8002440 <HAL_RCC_OscConfig+0xe38>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e02a      	b.n	8002494 <HAL_RCC_OscConfig+0xe8c>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002448:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800244c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002456:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002472:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	4b86      	ldr	r3, [pc, #536]	@ (80026ac <HAL_RCC_OscConfig+0x10a4>)
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002498:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800249c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024a6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	fa92 f1a2 	rbit	r1, r2
 80024b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024b4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024b8:	6011      	str	r1, [r2, #0]
  return result;
 80024ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024be:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f042 0220 	orr.w	r2, r2, #32
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f002 021f 	and.w	r2, r2, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f43f af7f 	beq.w	80023e0 <HAL_RCC_OscConfig+0xdd8>
 80024e2:	e0dd      	b.n	80026a0 <HAL_RCC_OscConfig+0x1098>
 80024e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002508:	601a      	str	r2, [r3, #0]
  return result;
 800250a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002512:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800251e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fd4b 	bl	8000fc4 <HAL_GetTick>
 800252e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002532:	e009      	b.n	8002548 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fd46 	bl	8000fc4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0ac      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
 8002548:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002550:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800256c:	601a      	str	r2, [r3, #0]
  return result;
 800256e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002572:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002576:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_RCC_OscConfig+0xf8a>
 800258c:	4b47      	ldr	r3, [pc, #284]	@ (80026ac <HAL_RCC_OscConfig+0x10a4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	e027      	b.n	80025e2 <HAL_RCC_OscConfig+0xfda>
 8002592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002596:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800259a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025bc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	4b33      	ldr	r3, [pc, #204]	@ (80026ac <HAL_RCC_OscConfig+0x10a4>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025e6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025ea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025ee:	6011      	str	r1, [r2, #0]
 80025f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025f4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	fa92 f1a2 	rbit	r1, r2
 80025fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002602:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002606:	6011      	str	r1, [r2, #0]
  return result;
 8002608:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800260c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d182      	bne.n	8002534 <HAL_RCC_OscConfig+0xf2c>
 800262e:	e037      	b.n	80026a0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002634:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02e      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_OscConfig+0x10a4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800264c:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <HAL_RCC_OscConfig+0x10a4>)
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002654:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002658:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	429a      	cmp	r2, r3
 800266a:	d117      	bne.n	800269c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800266c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002670:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002680:	429a      	cmp	r2, r3
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002690:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b09e      	sub	sp, #120	@ 0x78
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e162      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b90      	ldr	r3, [pc, #576]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b8d      	ldr	r3, [pc, #564]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	498b      	ldr	r1, [pc, #556]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b89      	ldr	r3, [pc, #548]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e14a      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b82      	ldr	r3, [pc, #520]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	497f      	ldr	r1, [pc, #508]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80dc 	beq.w	80028dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d13c      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xf6>
 800272c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002730:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800273a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d102      	bne.n	8002756 <HAL_RCC_ClockConfig+0xa6>
 8002750:	4b6f      	ldr	r3, [pc, #444]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	e00f      	b.n	8002776 <HAL_RCC_ClockConfig+0xc6>
 8002756:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800275a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	667b      	str	r3, [r7, #100]	@ 0x64
 8002764:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002768:	663b      	str	r3, [r7, #96]	@ 0x60
 800276a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002772:	4b67      	ldr	r3, [pc, #412]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800277a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800277c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002784:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d17b      	bne.n	800289a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0f3      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d13c      	bne.n	8002828 <HAL_RCC_ClockConfig+0x178>
 80027ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x128>
 80027d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_ClockConfig+0x148>
 80027d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f4:	4b46      	ldr	r3, [pc, #280]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027fc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80027fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002800:	fa92 f2a2 	rbit	r2, r2
 8002804:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f002 021f 	and.w	r2, r2, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d13a      	bne.n	800289a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b2      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
 8002828:	2302      	movs	r3, #2
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1a0>
 800284a:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e00d      	b.n	800286c <HAL_RCC_ClockConfig+0x1bc>
 8002850:	2302      	movs	r3, #2
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
 800285c:	2302      	movs	r3, #2
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	4b29      	ldr	r3, [pc, #164]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	2202      	movs	r2, #2
 800286e:	61ba      	str	r2, [r7, #24]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	617a      	str	r2, [r7, #20]
  return result;
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e079      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	491a      	ldr	r1, [pc, #104]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fb8a 	bl	8000fc4 <HAL_GetTick>
 80028b0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fb86 	bl	8000fc4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e061      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d214      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4906      	ldr	r1, [pc, #24]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b04      	ldr	r3, [pc, #16]	@ (800290c <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e040      	b.n	800298e <HAL_RCC_ClockConfig+0x2de>
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002920:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	491a      	ldr	r1, [pc, #104]	@ (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293e:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4912      	ldr	r1, [pc, #72]	@ (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002952:	f000 f829 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002956:	4601      	mov	r1, r0
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <HAL_RCC_ClockConfig+0x2e8>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002960:	22f0      	movs	r2, #240	@ 0xf0
 8002962:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	fa92 f2a2 	rbit	r2, r2
 800296a:	60fa      	str	r2, [r7, #12]
  return result;
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	fab2 f282 	clz	r2, r2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	40d3      	lsrs	r3, r2
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_RCC_ClockConfig+0x2ec>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	fa21 f303 	lsr.w	r3, r1, r3
 800297e:	4a08      	ldr	r2, [pc, #32]	@ (80029a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fad8 	bl	8000f3c <HAL_InitTick>
  
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3778      	adds	r7, #120	@ 0x78
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	080042b8 	.word	0x080042b8
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x30>
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d003      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x36>
 80029d6:	e029      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029da:	613b      	str	r3, [r7, #16]
      break;
 80029dc:	e029      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	4a18      	ldr	r2, [pc, #96]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80029ec:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	4a15      	ldr	r2, [pc, #84]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a04:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e007      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a16:	4a0b      	ldr	r2, [pc, #44]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	613b      	str	r3, [r7, #16]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a2e:	613b      	str	r3, [r7, #16]
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	693b      	ldr	r3, [r7, #16]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	080042d0 	.word	0x080042d0
 8002a4c:	080042e0 	.word	0x080042e0

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a6e:	f7ff ffef 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a7c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	fa92 f2a2 	rbit	r2, r2
 8002a88:	603a      	str	r2, [r7, #0]
  return result;
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	fab2 f282 	clz	r2, r2
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	40d3      	lsrs	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	080042c8 	.word	0x080042c8

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ab2:	f7ff ffcd 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ac0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ac4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	fa92 f2a2 	rbit	r2, r2
 8002acc:	603a      	str	r2, [r7, #0]
  return result;
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	40d3      	lsrs	r3, r2
 8002ad8:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	080042c8 	.word	0x080042c8

08002af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b092      	sub	sp, #72	@ 0x48
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80d4 	beq.w	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b14:	4b4e      	ldr	r3, [pc, #312]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10e      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b4b      	ldr	r3, [pc, #300]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a4a      	ldr	r2, [pc, #296]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	61d3      	str	r3, [r2, #28]
 8002b2c:	4b48      	ldr	r3, [pc, #288]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b45      	ldr	r3, [pc, #276]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b42      	ldr	r3, [pc, #264]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a41      	ldr	r2, [pc, #260]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fa35 	bl	8000fc4 <HAL_GetTick>
 8002b5a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fa31 	bl	8000fc4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	@ 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1d6      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b38      	ldr	r3, [pc, #224]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7c:	4b34      	ldr	r3, [pc, #208]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8084 	beq.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d07c      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	2300      	movs	r3, #0
 8002bec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bee:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d04b      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe f9e1 	bl	8000fc4 <HAL_GetTick>
 8002c02:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe f9dd 	bl	8000fc4 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e180      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c28:	2302      	movs	r3, #2
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	61fb      	str	r3, [r7, #28]
  return result;
 8002c34:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d108      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c4a:	4b01      	ldr	r3, [pc, #4]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	e00d      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
 8002c58:	10908100 	.word	0x10908100
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	4b9a      	ldr	r3, [pc, #616]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	613a      	str	r2, [r7, #16]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	fa92 f2a2 	rbit	r2, r2
 8002c76:	60fa      	str	r2, [r7, #12]
  return result;
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0b7      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c96:	4b8f      	ldr	r3, [pc, #572]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	498c      	ldr	r1, [pc, #560]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b88      	ldr	r3, [pc, #544]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4a87      	ldr	r2, [pc, #540]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc8:	4b82      	ldr	r3, [pc, #520]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	f023 0203 	bic.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	497f      	ldr	r1, [pc, #508]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4978      	ldr	r1, [pc, #480]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d04:	4b73      	ldr	r3, [pc, #460]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4970      	ldr	r1, [pc, #448]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d22:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f023 0210 	bic.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4969      	ldr	r1, [pc, #420]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d40:	4b64      	ldr	r3, [pc, #400]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	4961      	ldr	r1, [pc, #388]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f023 0220 	bic.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	495a      	ldr	r1, [pc, #360]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7c:	4b55      	ldr	r3, [pc, #340]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	4952      	ldr	r1, [pc, #328]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	494b      	ldr	r1, [pc, #300]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db8:	4b46      	ldr	r3, [pc, #280]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4943      	ldr	r1, [pc, #268]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	493c      	ldr	r1, [pc, #240]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002df4:	4b37      	ldr	r3, [pc, #220]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	4934      	ldr	r1, [pc, #208]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e12:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	492d      	ldr	r1, [pc, #180]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e30:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3c:	4925      	ldr	r1, [pc, #148]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e4e:	4b21      	ldr	r3, [pc, #132]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	491e      	ldr	r1, [pc, #120]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	4916      	ldr	r1, [pc, #88]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	490f      	ldr	r1, [pc, #60]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	4907      	ldr	r1, [pc, #28]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ec6:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eda:	4913      	ldr	r1, [pc, #76]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002eec:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef8:	490b      	ldr	r1, [pc, #44]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f16:	4904      	ldr	r1, [pc, #16]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3748      	adds	r7, #72	@ 0x48
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e09d      	b.n	800307a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f4e:	d009      	beq.n	8002f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
 8002f56:	e005      	b.n	8002f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fec2 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fa4:	d902      	bls.n	8002fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e002      	b.n	8002fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fba:	d007      	beq.n	8002fcc <HAL_SPI_Init+0xa0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	ea42 0103 	orr.w	r1, r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	f003 0204 	and.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003048:	ea42 0103 	orr.w	r1, r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08a      	sub	sp, #40	@ 0x28
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003090:	2301      	movs	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x26>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e20a      	b.n	80034be <HAL_SPI_TransmitReceive+0x43c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030b0:	f7fd ff88 	bl	8000fc4 <HAL_GetTick>
 80030b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030cc:	7efb      	ldrb	r3, [r7, #27]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d00e      	beq.n	80030f0 <HAL_SPI_TransmitReceive+0x6e>
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x66>
 80030e2:	7efb      	ldrb	r3, [r7, #27]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d003      	beq.n	80030f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80030ee:	e1e0      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_SPI_TransmitReceive+0x80>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_SPI_TransmitReceive+0x80>
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003108:	e1d3      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2205      	movs	r2, #5
 800311a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	887a      	ldrh	r2, [r7, #2]
 800312e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	887a      	ldrh	r2, [r7, #2]
 8003136:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	887a      	ldrh	r2, [r7, #2]
 800314a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003160:	d802      	bhi.n	8003168 <HAL_SPI_TransmitReceive+0xe6>
 8003162:	8a3b      	ldrh	r3, [r7, #16]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d908      	bls.n	800317a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	e007      	b.n	800318a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003194:	2b40      	cmp	r3, #64	@ 0x40
 8003196:	d007      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031b0:	f240 8081 	bls.w	80032b6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x140>
 80031bc:	8a7b      	ldrh	r3, [r7, #18]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d16d      	bne.n	800329e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e6:	e05a      	b.n	800329e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d11b      	bne.n	800322e <HAL_SPI_TransmitReceive+0x1ac>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d016      	beq.n	800322e <HAL_SPI_TransmitReceive+0x1ac>
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	2b01      	cmp	r3, #1
 8003204:	d113      	bne.n	800322e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d11c      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x1f4>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d016      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	b292      	uxth	r2, r2
 8003254:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	1c9a      	adds	r2, r3, #2
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003272:	2301      	movs	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003276:	f7fd fea5 	bl	8000fc4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003282:	429a      	cmp	r2, r3
 8003284:	d80b      	bhi.n	800329e <HAL_SPI_TransmitReceive+0x21c>
 8003286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d007      	beq.n	800329e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800329c:	e109      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d19f      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x166>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d199      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x166>
 80032b4:	e0e3      	b.n	800347e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x244>
 80032be:	8a7b      	ldrh	r3, [r7, #18]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 80cf 	bne.w	8003464 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d912      	bls.n	80032f6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b02      	subs	r3, #2
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032f4:	e0b6      	b.n	8003464 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800331c:	e0a2      	b.n	8003464 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d134      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x314>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d02f      	beq.n	8003396 <HAL_SPI_TransmitReceive+0x314>
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	2b01      	cmp	r3, #1
 800333a:	d12c      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d912      	bls.n	800336c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334a:	881a      	ldrh	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b02      	subs	r3, #2
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800336a:	e012      	b.n	8003392 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d148      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x3b4>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d042      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d923      	bls.n	8003404 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	b292      	uxth	r2, r2
 80033c8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	1c9a      	adds	r2, r3, #2
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b02      	subs	r3, #2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d81f      	bhi.n	8003432 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e016      	b.n	8003432 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f103 020c 	add.w	r2, r3, #12
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003432:	2301      	movs	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003436:	f7fd fdc5 	bl	8000fc4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003442:	429a      	cmp	r2, r3
 8003444:	d803      	bhi.n	800344e <HAL_SPI_TransmitReceive+0x3cc>
 8003446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d102      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x3d2>
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003462:	e026      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	f47f af57 	bne.w	800331e <HAL_SPI_TransmitReceive+0x29c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f af50 	bne.w	800331e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fa52 	bl	800392c <SPI_EndRxTxTransaction>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a8:	e003      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80034ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3728      	adds	r7, #40	@ 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10e      	bne.n	8003508 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
    return;
 8003506:	e0ce      	b.n	80036a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_SPI_IRQHandler+0x5e>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
    return;
 8003524:	e0bf      	b.n	80036a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <HAL_SPI_IRQHandler+0x7e>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80b0 	beq.w	80036a6 <HAL_SPI_IRQHandler+0x1de>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80aa 	beq.w	80036a6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b03      	cmp	r3, #3
 8003566:	d011      	beq.n	800358c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	f043 0204 	orr.w	r2, r3, #4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	e00b      	b.n	80035a4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
        return;
 80035a2:	e080      	b.n	80036a6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d014      	beq.n	80035d8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	f043 0208 	orr.w	r2, r3, #8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	2b00      	cmp	r3, #0
 8003602:	d04f      	beq.n	80036a4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003612:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <HAL_SPI_IRQHandler+0x168>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d034      	beq.n	800369a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0203 	bic.w	r2, r2, #3
 800363e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003644:	2b00      	cmp	r3, #0
 8003646:	d011      	beq.n	800366c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	4a17      	ldr	r2, [pc, #92]	@ (80036ac <HAL_SPI_IRQHandler+0x1e4>)
 800364e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fdf6 	bl	8001246 <HAL_DMA_Abort_IT>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003664:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003670:	2b00      	cmp	r3, #0
 8003672:	d016      	beq.n	80036a2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003678:	4a0c      	ldr	r2, [pc, #48]	@ (80036ac <HAL_SPI_IRQHandler+0x1e4>)
 800367a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	4618      	mov	r0, r3
 8003682:	f7fd fde0 	bl	8001246 <HAL_DMA_Abort_IT>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003698:	e003      	b.n	80036a2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f808 	bl	80036b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80036a0:	e000      	b.n	80036a4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80036a2:	bf00      	nop
    return;
 80036a4:	bf00      	nop
  }
}
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	080036c5 	.word	0x080036c5

080036b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff ffe5 	bl	80036b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003700:	f7fd fc60 	bl	8000fc4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	4413      	add	r3, r2
 800370e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003710:	f7fd fc58 	bl	8000fc4 <HAL_GetTick>
 8003714:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003716:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	015b      	lsls	r3, r3, #5
 800371c:	0d1b      	lsrs	r3, r3, #20
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003726:	e054      	b.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d050      	beq.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003730:	f7fd fc48 	bl	8000fc4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	429a      	cmp	r2, r3
 800373e:	d902      	bls.n	8003746 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d13d      	bne.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003754:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800375e:	d111      	bne.n	8003784 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003768:	d004      	beq.n	8003774 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003772:	d107      	bne.n	8003784 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378c:	d10f      	bne.n	80037ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e017      	b.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d19b      	bne.n	8003728 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000

08003800 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003812:	f7fd fbd7 	bl	8000fc4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	4413      	add	r3, r2
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003822:	f7fd fbcf 	bl	8000fc4 <HAL_GetTick>
 8003826:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003830:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00da      	lsls	r2, r3, #3
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	0d1b      	lsrs	r3, r3, #20
 8003840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003848:	e060      	b.n	800390c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003850:	d107      	bne.n	8003862 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003860:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d050      	beq.n	800390c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800386a:	f7fd fbab 	bl	8000fc4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003876:	429a      	cmp	r2, r3
 8003878:	d902      	bls.n	8003880 <SPI_WaitFifoStateUntilTimeout+0x80>
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d13d      	bne.n	80038fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800388e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003898:	d111      	bne.n	80038be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a2:	d004      	beq.n	80038ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ac:	d107      	bne.n	80038be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c6:	d10f      	bne.n	80038e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e010      	b.n	800391e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3b01      	subs	r3, #1
 800390a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d196      	bne.n	800384a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3728      	adds	r7, #40	@ 0x28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000

0800392c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2200      	movs	r2, #0
 8003940:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff ff5b 	bl	8003800 <SPI_WaitFifoStateUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e027      	b.n	80039b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	2180      	movs	r1, #128	@ 0x80
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff fec0 	bl	80036f0 <SPI_WaitFlagStateUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e014      	b.n	80039b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff ff34 	bl	8003800 <SPI_WaitFifoStateUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e000      	b.n	80039b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e040      	b.n	8003a4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd f9e0 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2224      	movs	r2, #36	@ 0x24
 80039e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9fc 	bl	8003dfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f825 	bl	8003a54 <UART_SetConfig>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e01b      	b.n	8003a4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa7b 	bl	8003f40 <UART_CheckIdleState>
 8003a4a:	4603      	mov	r3, r0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b92      	ldr	r3, [pc, #584]	@ (8003cc8 <UART_SetConfig+0x274>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	6979      	ldr	r1, [r7, #20]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a80      	ldr	r2, [pc, #512]	@ (8003ccc <UART_SetConfig+0x278>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d120      	bne.n	8003b12 <UART_SetConfig+0xbe>
 8003ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd0 <UART_SetConfig+0x27c>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d817      	bhi.n	8003b0c <UART_SetConfig+0xb8>
 8003adc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <UART_SetConfig+0x90>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b01 	.word	0x08003b01
 8003aec:	08003b07 	.word	0x08003b07
 8003af0:	08003afb 	.word	0x08003afb
 8003af4:	2301      	movs	r3, #1
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e0b5      	b.n	8003c66 <UART_SetConfig+0x212>
 8003afa:	2302      	movs	r3, #2
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e0b2      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b00:	2304      	movs	r3, #4
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e0af      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b06:	2308      	movs	r3, #8
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e0ac      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e0a9      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6f      	ldr	r2, [pc, #444]	@ (8003cd4 <UART_SetConfig+0x280>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d124      	bne.n	8003b66 <UART_SetConfig+0x112>
 8003b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd0 <UART_SetConfig+0x27c>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b28:	d011      	beq.n	8003b4e <UART_SetConfig+0xfa>
 8003b2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b2e:	d817      	bhi.n	8003b60 <UART_SetConfig+0x10c>
 8003b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b34:	d011      	beq.n	8003b5a <UART_SetConfig+0x106>
 8003b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b3a:	d811      	bhi.n	8003b60 <UART_SetConfig+0x10c>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <UART_SetConfig+0xf4>
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	d006      	beq.n	8003b54 <UART_SetConfig+0x100>
 8003b46:	e00b      	b.n	8003b60 <UART_SetConfig+0x10c>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e08b      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e088      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b54:	2304      	movs	r3, #4
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e085      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e082      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b60:	2310      	movs	r3, #16
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e07f      	b.n	8003c66 <UART_SetConfig+0x212>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd8 <UART_SetConfig+0x284>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d124      	bne.n	8003bba <UART_SetConfig+0x166>
 8003b70:	4b57      	ldr	r3, [pc, #348]	@ (8003cd0 <UART_SetConfig+0x27c>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003b78:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b7c:	d011      	beq.n	8003ba2 <UART_SetConfig+0x14e>
 8003b7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b82:	d817      	bhi.n	8003bb4 <UART_SetConfig+0x160>
 8003b84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b88:	d011      	beq.n	8003bae <UART_SetConfig+0x15a>
 8003b8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b8e:	d811      	bhi.n	8003bb4 <UART_SetConfig+0x160>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <UART_SetConfig+0x148>
 8003b94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b98:	d006      	beq.n	8003ba8 <UART_SetConfig+0x154>
 8003b9a:	e00b      	b.n	8003bb4 <UART_SetConfig+0x160>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e061      	b.n	8003c66 <UART_SetConfig+0x212>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e05e      	b.n	8003c66 <UART_SetConfig+0x212>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e05b      	b.n	8003c66 <UART_SetConfig+0x212>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e058      	b.n	8003c66 <UART_SetConfig+0x212>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e055      	b.n	8003c66 <UART_SetConfig+0x212>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a47      	ldr	r2, [pc, #284]	@ (8003cdc <UART_SetConfig+0x288>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d124      	bne.n	8003c0e <UART_SetConfig+0x1ba>
 8003bc4:	4b42      	ldr	r3, [pc, #264]	@ (8003cd0 <UART_SetConfig+0x27c>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003bcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bd0:	d011      	beq.n	8003bf6 <UART_SetConfig+0x1a2>
 8003bd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bd6:	d817      	bhi.n	8003c08 <UART_SetConfig+0x1b4>
 8003bd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bdc:	d011      	beq.n	8003c02 <UART_SetConfig+0x1ae>
 8003bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be2:	d811      	bhi.n	8003c08 <UART_SetConfig+0x1b4>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <UART_SetConfig+0x19c>
 8003be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bec:	d006      	beq.n	8003bfc <UART_SetConfig+0x1a8>
 8003bee:	e00b      	b.n	8003c08 <UART_SetConfig+0x1b4>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e037      	b.n	8003c66 <UART_SetConfig+0x212>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e034      	b.n	8003c66 <UART_SetConfig+0x212>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e031      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c02:	2308      	movs	r3, #8
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e02e      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e02b      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a33      	ldr	r2, [pc, #204]	@ (8003ce0 <UART_SetConfig+0x28c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d124      	bne.n	8003c62 <UART_SetConfig+0x20e>
 8003c18:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd0 <UART_SetConfig+0x27c>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003c20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c24:	d011      	beq.n	8003c4a <UART_SetConfig+0x1f6>
 8003c26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c2a:	d817      	bhi.n	8003c5c <UART_SetConfig+0x208>
 8003c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c30:	d011      	beq.n	8003c56 <UART_SetConfig+0x202>
 8003c32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c36:	d811      	bhi.n	8003c5c <UART_SetConfig+0x208>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <UART_SetConfig+0x1f0>
 8003c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c40:	d006      	beq.n	8003c50 <UART_SetConfig+0x1fc>
 8003c42:	e00b      	b.n	8003c5c <UART_SetConfig+0x208>
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e00d      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e00a      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c50:	2304      	movs	r3, #4
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e007      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c56:	2308      	movs	r3, #8
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e004      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e001      	b.n	8003c66 <UART_SetConfig+0x212>
 8003c62:	2310      	movs	r3, #16
 8003c64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6e:	d16b      	bne.n	8003d48 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d838      	bhi.n	8003ce8 <UART_SetConfig+0x294>
 8003c76:	a201      	add	r2, pc, #4	@ (adr r2, 8003c7c <UART_SetConfig+0x228>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003ca1 	.word	0x08003ca1
 8003c80:	08003ca9 	.word	0x08003ca9
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08003ce9 	.word	0x08003ce9
 8003c8c:	08003cb7 	.word	0x08003cb7
 8003c90:	08003ce9 	.word	0x08003ce9
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003ce9 	.word	0x08003ce9
 8003c9c:	08003cbf 	.word	0x08003cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f7fe fee2 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8003ca4:	61b8      	str	r0, [r7, #24]
        break;
 8003ca6:	e024      	b.n	8003cf2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca8:	f7fe ff00 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003cac:	61b8      	str	r0, [r7, #24]
        break;
 8003cae:	e020      	b.n	8003cf2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <UART_SetConfig+0x290>)
 8003cb2:	61bb      	str	r3, [r7, #24]
        break;
 8003cb4:	e01d      	b.n	8003cf2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb6:	f7fe fe77 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003cba:	61b8      	str	r0, [r7, #24]
        break;
 8003cbc:	e019      	b.n	8003cf2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc2:	61bb      	str	r3, [r7, #24]
        break;
 8003cc4:	e015      	b.n	8003cf2 <UART_SetConfig+0x29e>
 8003cc6:	bf00      	nop
 8003cc8:	efff69f3 	.word	0xefff69f3
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004800 	.word	0x40004800
 8003cdc:	40004c00 	.word	0x40004c00
 8003ce0:	40005000 	.word	0x40005000
 8003ce4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	77bb      	strb	r3, [r7, #30]
        break;
 8003cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d073      	beq.n	8003de0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	005a      	lsls	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	441a      	add	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b0f      	cmp	r3, #15
 8003d12:	d916      	bls.n	8003d42 <UART_SetConfig+0x2ee>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1a:	d212      	bcs.n	8003d42 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f023 030f 	bic.w	r3, r3, #15
 8003d24:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	89fb      	ldrh	r3, [r7, #14]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	89fa      	ldrh	r2, [r7, #14]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e04e      	b.n	8003de0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	77bb      	strb	r3, [r7, #30]
 8003d46:	e04b      	b.n	8003de0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d48:	7ffb      	ldrb	r3, [r7, #31]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d827      	bhi.n	8003d9e <UART_SetConfig+0x34a>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0x300>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d9f 	.word	0x08003d9f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	08003d97 	.word	0x08003d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe fe76 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	61b8      	str	r0, [r7, #24]
        break;
 8003d7e:	e013      	b.n	8003da8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe fe94 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003d84:	61b8      	str	r0, [r7, #24]
        break;
 8003d86:	e00f      	b.n	8003da8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <UART_SetConfig+0x3a4>)
 8003d8a:	61bb      	str	r3, [r7, #24]
        break;
 8003d8c:	e00c      	b.n	8003da8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7fe fe0b 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8003d92:	61b8      	str	r0, [r7, #24]
        break;
 8003d94:	e008      	b.n	8003da8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9a:	61bb      	str	r3, [r7, #24]
        break;
 8003d9c:	e004      	b.n	8003da8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	77bb      	strb	r3, [r7, #30]
        break;
 8003da6:	bf00      	nop
    }

    if (pclk != 0U)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d018      	beq.n	8003de0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	085a      	lsrs	r2, r3, #1
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	441a      	add	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d909      	bls.n	8003ddc <UART_SetConfig+0x388>
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dce:	d205      	bcs.n	8003ddc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	e001      	b.n	8003de0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003dec:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	007a1200 	.word	0x007a1200

08003dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01a      	beq.n	8003f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003efa:	d10a      	bne.n	8003f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b098      	sub	sp, #96	@ 0x60
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f50:	f7fd f838 	bl	8000fc4 <HAL_GetTick>
 8003f54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d12e      	bne.n	8003fc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f88c 	bl	8004090 <UART_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d021      	beq.n	8003fc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e062      	b.n	8004088 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d149      	bne.n	8004064 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f856 	bl	8004090 <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03c      	beq.n	8004064 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
 800400a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800400e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	60fb      	str	r3, [r7, #12]
   return(result);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800403c:	61fa      	str	r2, [r7, #28]
 800403e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	617b      	str	r3, [r7, #20]
   return(result);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e011      	b.n	8004088 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3758      	adds	r7, #88	@ 0x58
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a0:	e04f      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d04b      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040aa:	f7fc ff8b 	bl	8000fc4 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d302      	bcc.n	80040c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e04e      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d037      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b80      	cmp	r3, #128	@ 0x80
 80040d6:	d034      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b40      	cmp	r3, #64	@ 0x40
 80040dc:	d031      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d110      	bne.n	800410e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2208      	movs	r2, #8
 80040f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f838 	bl	800416a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2208      	movs	r2, #8
 80040fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e029      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800411c:	d111      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f81e 	bl	800416a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e00f      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	429a      	cmp	r2, r3
 800415e:	d0a0      	beq.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800416a:	b480      	push	{r7}
 800416c:	b095      	sub	sp, #84	@ 0x54
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004190:	643b      	str	r3, [r7, #64]	@ 0x40
 8004192:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004196:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800419e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e5      	bne.n	80041a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d118      	bne.n	8004212 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0310 	bic.w	r3, r3, #16
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e6      	bne.n	80041e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004226:	bf00      	nop
 8004228:	3754      	adds	r7, #84	@ 0x54
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <memset>:
 8004232:	4402      	add	r2, r0
 8004234:	4603      	mov	r3, r0
 8004236:	4293      	cmp	r3, r2
 8004238:	d100      	bne.n	800423c <memset+0xa>
 800423a:	4770      	bx	lr
 800423c:	f803 1b01 	strb.w	r1, [r3], #1
 8004240:	e7f9      	b.n	8004236 <memset+0x4>
	...

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4d0d      	ldr	r5, [pc, #52]	@ (800427c <__libc_init_array+0x38>)
 8004248:	4c0d      	ldr	r4, [pc, #52]	@ (8004280 <__libc_init_array+0x3c>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	2600      	movs	r6, #0
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	4d0b      	ldr	r5, [pc, #44]	@ (8004284 <__libc_init_array+0x40>)
 8004256:	4c0c      	ldr	r4, [pc, #48]	@ (8004288 <__libc_init_array+0x44>)
 8004258:	f000 f818 	bl	800428c <_init>
 800425c:	1b64      	subs	r4, r4, r5
 800425e:	10a4      	asrs	r4, r4, #2
 8004260:	2600      	movs	r6, #0
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	080042f0 	.word	0x080042f0
 8004280:	080042f0 	.word	0x080042f0
 8004284:	080042f0 	.word	0x080042f0
 8004288:	080042f4 	.word	0x080042f4

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
